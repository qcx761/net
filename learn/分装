; (1) inetConnect()​​
; ​​作用​​：封装 socket() + connect()，直接建立 TCP 连接。
; ​​典型参数​​：
; host：目标主机（IP 或域名）。
; port：目标端口。
; nonblock（可选）：是否设置为非阻塞模式。
; ​​返回值​​：套接字描述符或错误码。
; ​​示例（伪代码）​​
; int sockfd = inetConnect("127.0.0.1", 8080, 0);  // 阻塞连接
; if (sockfd < 0) {
;     fprintf(stderr, "Connection failed\n");
;     exit(EXIT_FAILURE);
; }
; ​​(2) inetListen()​​
; ​​作用​​：封装 socket() + bind() + listen()，直接启动 TCP 服务器监听。
; ​​典型参数​​：
; host：监听地址（NULL 或 "0.0.0.0" 表示所有网卡）。
; port：监听端口。
; backlog：等待连接队列长度。
; nonblock（可选）：是否设置为非阻塞模式。
; ​​返回值​​：套接字描述符或错误码。
; ​​示例（伪代码）​​
; int server_fd = inetListen(NULL, 8080, 5, 0);  // 监听所有网卡的 8080 端口
; if (server_fd < 0) {
;     fprintf(stderr, "Failed to listen\n");
;     exit(EXIT_FAILURE);
; }
; ​​(3) inetBind()​​
; ​​作用​​：封装 bind()，可能额外处理地址转换（如 INADDR_ANY）。
; ​​典型参数​​：
; sockfd：套接字描述符。
; host：绑定地址（NULL 或 "0.0.0.0" 表示所有网卡）。
; port：绑定端口。
; ​​返回值​​：成功返回 0，失败返回 -1。
; ​​示例（伪代码）​​
; int sockfd = socket(AF_INET, SOCK_STREAM, 0);
; if (inetBind(sockfd, NULL, 8080) < 0) {  // 绑定到所有网卡的 8080 端口
;     perror("bind failed");
;     exit(EXIT_FAILURE);
; }
; ​​(4) inetAddressStr()​​
; ​​作用​​：将 sockaddr 结构转换为可读的 IP:Port 字符串（如 "192.168.1.1:8080"）。
; ​​典型参数​​：
; addr：sockaddr 结构指针。
; addrlen：地址结构大小。
; buf：存储结果的缓冲区。
; buflen：缓冲区大小。
; ​​返回值​​：成功返回字符串长度，失败返回 -1。
; ​​示例（伪代码）​​
; struct sockaddr_in client_addr;
; socklen_t addr_len = sizeof(client_addr);
; int client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &addr_len);

; char client_ip[INET_ADDRSTRLEN];
; inet_ntop(AF_INET, &client_addr.sin_addr, client_ip, INET_ADDRSTRLEN);
; printf("Client connected: %s:%d\n", client_ip, ntohs(client_addr.sin_port));

; // 如果 inetAddressStr 存在，可能这样用：
; // char addr_str[64];
; // inetAddressStr((struct sockaddr *)&client_addr, addr_len, addr_str, sizeof(addr_str));
; // printf("Client: %s\n", addr_str);